-- Seed the database with initial portfolio data

-- Insert services
INSERT INTO services (title, description, icon, order_index, is_active) VALUES
('Full-Stack Development', 'Building robust and scalable web applications from front-end to back-end using modern technologies like React, Node.js, and cloud platforms.', 'Code', 1, true),
('Front-End Development', 'Crafting intuitive and responsive user interfaces with modern frameworks like React, Next.js, and Vue.js for exceptional user experiences.', 'Layout', 2, true),
('UI/UX Design Implementation', 'Translating design mockups into pixel-perfect, interactive web experiences with attention to accessibility and performance.', 'Palette', 3, true),
('API Development & Integration', 'Designing and implementing secure, efficient RESTful and GraphQL APIs, plus integrating third-party services and payment systems.', 'Users', 4, true),
('Database Design & Optimization', 'Architecting scalable database solutions with PostgreSQL, MongoDB, and implementing efficient data modeling and query optimization.', 'Database', 5, true),
('DevOps & Deployment', 'Setting up CI/CD pipelines, containerization with Docker, and deploying applications on AWS, Vercel, and other cloud platforms.', 'Cloud', 6, true)
ON CONFLICT DO NOTHING;

-- Insert education
INSERT INTO education (degree, institution, years, description, icon, order_index, is_active) VALUES
('Master of Science in Computer Science', 'University of Technology', '2020 - 2022', 'Specialization in Web Technologies and Artificial Intelligence. Thesis on AI-driven UI generation and optimization. Graduated with distinction.', 'GraduationCap', 1, true),
('Bachelor of Science in Software Engineering', 'State University', '2016 - 2020', 'Graduated with Honors (3.8 GPA). Focused on algorithms, data structures, object-oriented programming, and software design patterns. Active in coding competitions.', 'GraduationCap', 2, true),
('Full Stack Web Development Bootcamp', 'Code Academy', '2020', 'Intensive 12-week program covering MERN stack, modern web practices, RESTful APIs, and cloud deployment strategies. Built 5 full-stack projects.', 'Laptop', 3, true),
('Certified Kubernetes Administrator (CKA)', 'Cloud Native Computing Foundation', '2023', 'Certification demonstrating proficiency in Kubernetes administration, including deployment, scaling, troubleshooting, and cluster management.', 'Award', 4, true),
('AWS Solutions Architect Associate', 'Amazon Web Services', '2022', 'Comprehensive certification covering AWS cloud architecture, security, scalability, and cost optimization for enterprise applications.', 'Cloud', 5, true)
ON CONFLICT DO NOTHING;

-- Insert tech stack
INSERT INTO tech_stack (name, icon, category, order_index, is_active) VALUES
('React', '‚öõÔ∏è', 'Frontend', 1, true),
('Next.js', '‚ñ≤', 'Frontend', 2, true),
('TypeScript', 'üî∑', 'Language', 3, true),
('JavaScript', 'üü®', 'Language', 4, true),
('Tailwind CSS', 'üé®', 'Styling', 5, true),
('Node.js', 'üü¢', 'Backend', 6, true),
('Express.js', 'üöÇ', 'Backend', 7, true),
('Python', 'üêç', 'Language', 8, true),
('PostgreSQL', 'üêò', 'Database', 9, true),
('MongoDB', 'üçÉ', 'Database', 10, true),
('Redis', 'üî¥', 'Database', 11, true),
('Docker', 'üê≥', 'DevOps', 12, true),
('Kubernetes', '‚ò∏Ô∏è', 'DevOps', 13, true),
('AWS', '‚òÅÔ∏è', 'Cloud', 14, true),
('Vercel', '‚ñ≤', 'Cloud', 15, true),
('Git', 'üìù', 'Tools', 16, true),
('GraphQL', 'üîó', 'API', 17, true),
('REST API', 'üåê', 'API', 18, true),
('Jest', 'üÉè', 'Testing', 19, true),
('Cypress', 'üå≤', 'Testing', 20, true)
ON CONFLICT DO NOTHING;

-- Insert projects
INSERT INTO projects (title, description, tech_stack, live_link, github_link, image_url, is_featured, order_index, is_active) VALUES
('E-commerce Platform', 'A comprehensive full-stack e-commerce application featuring user authentication, product catalog, shopping cart, secure payment processing with Stripe, order management, and admin dashboard. Includes real-time inventory tracking and email notifications.', ARRAY['Next.js', 'React', 'TypeScript', 'Node.js', 'PostgreSQL', 'Stripe', 'Tailwind CSS', 'Vercel'], 'https://ecommerce-demo.vercel.app', 'https://github.com/username/ecommerce-platform', '/placeholder.svg?height=400&width=600', true, 1, true),
('Task Management SaaS', 'A collaborative task management application with real-time updates, drag-and-drop functionality, team workspaces, time tracking, and advanced reporting. Features include Kanban boards, calendar integration, and mobile responsiveness.', ARRAY['React', 'TypeScript', 'Firebase', 'Redux Toolkit', 'Material-UI', 'Socket.io'], 'https://taskmanager-pro.vercel.app', 'https://github.com/username/task-manager', '/placeholder.svg?height=400&width=600', true, 2, true),
('AI-Powered Blog Platform', 'A modern blog platform with AI-assisted content generation, markdown support, syntax highlighting, SEO optimization, and analytics dashboard. Includes comment system, social sharing, and automated content recommendations.', ARRAY['Next.js', 'MDX', 'OpenAI API', 'Tailwind CSS', 'Prisma', 'PostgreSQL'], 'https://ai-blog-platform.vercel.app', 'https://github.com/username/ai-blog', '/placeholder.svg?height=400&width=600', true, 3, true),
('Real-time Chat Application', 'A scalable real-time messaging application with private and group chats, file sharing, emoji reactions, message encryption, and presence indicators. Built with modern WebSocket technology for instant communication.', ARRAY['React', 'Node.js', 'Socket.io', 'MongoDB', 'Express', 'JWT'], 'https://realtime-chat-app.vercel.app', 'https://github.com/username/chat-app', '/placeholder.svg?height=400&width=600', false, 4, true),
('Cryptocurrency Dashboard', 'A comprehensive cryptocurrency tracking dashboard with real-time price updates, portfolio management, price alerts, historical charts, and market analysis. Integrates with multiple crypto APIs for accurate data.', ARRAY['Vue.js', 'Chart.js', 'CoinGecko API', 'Vuex', 'Bootstrap'], 'https://crypto-dashboard.vercel.app', 'https://github.com/username/crypto-dashboard', '/placeholder.svg?height=400&width=600', false, 5, true),
('Recipe Sharing Platform', 'A social platform for sharing and discovering recipes with advanced search filters, nutritional information, meal planning, shopping lists, and user ratings. Features recipe scaling and dietary restriction filters.', ARRAY['React', 'Node.js', 'MongoDB', 'Cloudinary', 'Express', 'JWT'], 'https://recipe-platform.vercel.app', 'https://github.com/username/recipe-platform', '/placeholder.svg?height=400&width=600', false, 6, true)
ON CONFLICT DO NOTHING;

-- Insert testimonials
INSERT INTO testimonials (name, title, company, quote, rating, avatar_url, order_index, is_active) VALUES
('Sarah Johnson', 'CEO & Founder', 'TechStart Inc.', 'Working with this developer was an absolute game-changer for our startup. They delivered a robust e-commerce platform that exceeded our expectations. The attention to detail, code quality, and ability to translate our vision into reality was outstanding. Our sales increased by 300% within the first quarter!', 5, '/placeholder.svg?height=100&width=100', 1, true),
('Michael Chen', 'CTO', 'Digital Solutions Ltd.', 'Exceptional technical skills and professionalism. The full-stack application they built for us handles thousands of users seamlessly. Their expertise in React, Node.js, and cloud architecture saved us months of development time. I highly recommend them for any complex web development project.', 5, '/placeholder.svg?height=100&width=100', 2, true),
('Emily Rodriguez', 'Product Manager', 'InnovateCorp', 'The task management platform they developed transformed how our team collaborates. The real-time features and intuitive UI design have significantly improved our productivity. They were responsive to feedback and delivered ahead of schedule. Truly a pleasure to work with!', 5, '/placeholder.svg?height=100&width=100', 3, true),
('David Thompson', 'Marketing Director', 'GrowthAgency', 'Our new website not only looks amazing but performs incredibly well. The SEO optimization and page speed improvements led to a 150% increase in organic traffic. Their understanding of both technical and business requirements is impressive.', 5, '/placeholder.svg?height=100&width=100', 4, true),
('Lisa Wang', 'Startup Founder', 'HealthTech Solutions', 'From concept to deployment, they guided us through every step of building our healthcare platform. Their expertise in security, compliance, and scalable architecture was crucial for our success. The platform now serves over 10,000 patients monthly.', 5, '/placeholder.svg?height=100&width=100', 5, true)
ON CONFLICT DO NOTHING;

-- Insert articles
INSERT INTO articles (title, slug, description, content, category, read_time, is_published, is_featured, order_index) VALUES
('Optimizing Next.js Performance: A Deep Dive', 'optimizing-nextjs-performance', 'Explore advanced techniques to boost your Next.js application speed and user experience, from image optimization to data fetching strategies.', '<h2>Introduction</h2><p>Next.js performance optimization is crucial for delivering exceptional user experiences. In this comprehensive guide, we''ll explore advanced techniques that can significantly improve your application''s speed and efficiency.</p><h3>1. Image Optimization</h3><p>Next.js provides built-in image optimization through the <code>next/image</code> component. This component automatically:</p><ul><li>Serves images in modern formats like WebP</li><li>Resizes images for different viewports</li><li>Implements lazy loading by default</li><li>Prevents Cumulative Layout Shift (CLS)</li></ul><pre><code>import Image from ''next/image''\n\nfunction MyComponent() {\n  return (\n    &lt;Image\n      src="/hero-image.jpg"\n      alt="Hero image"\n      width={800}\n      height={600}\n      priority // for above-the-fold images\n    /&gt;\n  )\n}</code></pre><h3>2. Code Splitting and Dynamic Imports</h3><p>Leverage Next.js automatic code splitting and dynamic imports for components that aren''t immediately needed:</p><pre><code>import dynamic from ''next/dynamic''\n\nconst DynamicComponent = dynamic(() => import(''../components/HeavyComponent''), {\n  loading: () => &lt;p&gt;Loading...&lt;/p&gt;,\n  ssr: false // if component should only render on client\n})</code></pre><h3>3. Data Fetching Optimization</h3><p>Choose the right data fetching strategy based on your content''s requirements:</p><ul><li><strong>Static Generation (SSG)</strong>: For content that doesn''t change often</li><li><strong>Server-Side Rendering (SSR)</strong>: For dynamic content that needs to be fresh</li><li><strong>Client-Side Fetching</strong>: For user-specific data</li></ul><h3>4. Bundle Analysis</h3><p>Use <code>@next/bundle-analyzer</code> to visualize your bundle size and identify optimization opportunities:</p><pre><code>npm install @next/bundle-analyzer\n\n// next.config.js\nconst withBundleAnalyzer = require(''@next/bundle-analyzer'')({\n  enabled: process.env.ANALYZE === ''true''\n})\n\nmodule.exports = withBundleAnalyzer({})</code></pre><p>Run <code>ANALYZE=true npm run build</code> to generate the analysis.</p><h3>Conclusion</h3><p>By implementing these optimization techniques, you can significantly improve your Next.js application''s performance, leading to better user experience and improved SEO rankings.</p>', 'Performance', '8 min read', true, true, 1),
('Building Scalable APIs with Node.js and GraphQL', 'scalable-apis-nodejs-graphql', 'A comprehensive guide to designing and implementing robust, scalable APIs using Node.js, Express, and GraphQL for efficient data management.', '<h2>Why GraphQL for Scalable APIs?</h2><p>GraphQL revolutionizes API development by allowing clients to request exactly the data they need, reducing over-fetching and improving performance. Combined with Node.js, it creates a powerful foundation for scalable applications.</p><h3>Setting Up the Foundation</h3><p>Start with a solid project structure:</p><pre><code>project/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ schema/\n‚îÇ   ‚îú‚îÄ‚îÄ resolvers/\n‚îÇ   ‚îú‚îÄ‚îÄ models/\n‚îÇ   ‚îú‚îÄ‚îÄ middleware/\n‚îÇ   ‚îî‚îÄ‚îÄ utils/\n‚îú‚îÄ‚îÄ tests/\n‚îî‚îÄ‚îÄ package.json</code></pre><h3>1. Schema Design Best Practices</h3><p>Design your GraphQL schema with scalability in mind:</p><pre><code>type User {\n  id: ID!\n  email: String!\n  profile: UserProfile\n  posts(first: Int, after: String): PostConnection\n}\n\ntype PostConnection {\n  edges: [PostEdge!]!\n  pageInfo: PageInfo!\n}\n\ntype PostEdge {\n  node: Post!\n  cursor: String!\n}</code></pre><h3>2. Efficient Data Loading</h3><p>Implement DataLoader to solve the N+1 query problem:</p><pre><code>const DataLoader = require(''dataloader'')\n\nconst userLoader = new DataLoader(async (userIds) => {\n  const users = await User.findByIds(userIds)\n  return userIds.map(id => users.find(user => user.id === id))\n})\n\n// In your resolver\nconst user = await userLoader.load(userId)</code></pre><h3>3. Authentication and Authorization</h3><p>Implement robust security measures:</p><pre><code>const jwt = require(''jsonwebtoken'')\n\nconst authMiddleware = (req, res, next) => {\n  const token = req.headers.authorization?.replace(''Bearer '', '''')\n  \n  if (!token) {\n    return res.status(401).json({ error: ''No token provided'' })\n  }\n  \n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET)\n    req.user = decoded\n    next()\n  } catch (error) {\n    return res.status(401).json({ error: ''Invalid token'' })\n  }\n}</code></pre><h3>4. Performance Monitoring</h3><p>Implement comprehensive monitoring:</p><pre><code>const { ApolloServer } = require(''apollo-server-express'')\nconst { ApolloServerPluginLandingPageGraphQLPlayground } = require(''apollo-server-core'')\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    {\n      requestDidStart() {\n        return {\n          didResolveOperation(requestContext) {\n            console.log(''Query:'', requestContext.request.query)\n          },\n          didEncounterErrors(requestContext) {\n            console.error(''GraphQL errors:'', requestContext.errors)\n          }\n        }\n      }\n    }\n  ]\n})</code></pre><h3>Conclusion</h3><p>Building scalable APIs with Node.js and GraphQL requires careful planning, efficient data loading strategies, and robust security measures. By following these practices, you can create APIs that grow with your application''s needs.</p>', 'Backend', '12 min read', true, true, 2),
('The Future of CSS: Container Queries and Beyond', 'future-of-css', 'Dive into the exciting new features coming to CSS, including container queries, cascade layers, and how they will revolutionize responsive design.', '<h2>CSS Evolution: Beyond Media Queries</h2><p>CSS continues to evolve rapidly, bringing powerful new features that will transform how we approach responsive design and component architecture. Let''s explore the most exciting developments.</p><h3>1. Container Queries: Component-Driven Responsive Design</h3><p>Container queries allow components to respond to their container''s size rather than the viewport:</p><pre><code>/* Define a container */\n.card-container {\n  container-type: inline-size;\n  container-name: card;\n}\n\n/* Query the container */\n@container card (min-width: 400px) {\n  .card {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n  }\n  \n  .card-title {\n    font-size: 1.5rem;\n  }\n}</code></pre><p>This enables truly modular, reusable components that adapt based on their context.</p><h3>2. Cascade Layers: Taming CSS Specificity</h3><p>Cascade layers provide explicit control over CSS specificity:</p><pre><code>@layer reset, base, components, utilities;\n\n@layer reset {\n  * {\n    margin: 0;\n    padding: 0;\n  }\n}\n\n@layer base {\n  body {\n    font-family: system-ui;\n    line-height: 1.5;\n  }\n}\n\n@layer components {\n  .button {\n    padding: 0.5rem 1rem;\n    border: none;\n    border-radius: 0.25rem;\n  }\n}\n\n@layer utilities {\n  .text-center {\n    text-align: center;\n  }\n}</code></pre><h3>3. The :has() Pseudo-Class</h3><p>The "parent selector" we''ve always wanted:</p><pre><code>/* Style a card that contains an image */\n.card:has(img) {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n}\n\n/* Style a form that has invalid inputs */\n.form:has(input:invalid) {\n  border-color: red;\n}\n\n/* Style navigation when it contains a dropdown */\n.nav:has(.dropdown:hover) .nav-background {\n  background: rgba(0, 0, 0, 0.1);\n}</code></pre><h3>4. CSS Nesting</h3><p>Native CSS nesting without preprocessors:</p><pre><code>.card {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  \n  & .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    \n    &:hover {\n      color: blue;\n    }\n  }\n  \n  & .content {\n    margin-top: 0.5rem;\n    \n    & p {\n      margin-bottom: 0.5rem;\n    }\n  }\n}</code></pre><h3>5. Subgrid: Enhanced Grid Control</h3><p>Subgrid allows nested grids to participate in their parent''s grid:</p><pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 1rem;\n}\n\n.grid-item {\n  display: grid;\n  grid-column: span 2;\n  grid-template-columns: subgrid; /* Inherits parent''s columns */\n  grid-template-rows: subgrid;    /* Inherits parent''s rows */\n}</code></pre><h3>Browser Support and Progressive Enhancement</h3><p>While adopting these features, use progressive enhancement:</p><pre><code>/* Fallback for older browsers */\n.component {\n  width: 100%;\n}\n\n/* Enhanced version with container queries */\n@supports (container-type: inline-size) {\n  .container {\n    container-type: inline-size;\n  }\n  \n  @container (min-width: 400px) {\n    .component {\n      width: 50%;\n    }\n  }\n}</code></pre><h3>Conclusion</h3><p>These new CSS features represent a fundamental shift toward more maintainable, component-driven styling. As browser support improves, they''ll become essential tools for modern web development.</p>', 'CSS', '10 min read', true, true, 3),
('State Management in React: Choosing the Right Tool', 'state-management-react', 'A comprehensive comparison of popular state management solutions in React, including Redux Toolkit, Zustand, and React Context, to help you choose the best approach for your project.', '<h2>The State Management Landscape</h2><p>Choosing the right state management solution is crucial for React applications. Let''s explore the most popular options and when to use each one.</p><h3>1. React Context API: The Built-in Solution</h3><p>Perfect for simple global state that doesn''t change frequently:</p><pre><code>import { createContext, useContext, useReducer } from ''react''\n\nconst AppContext = createContext()\n\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case ''SET_USER'':\n      return { ...state, user: action.payload }\n    case ''SET_THEME'':\n      return { ...state, theme: action.payload }\n    default:\n      return state\n  }\n}\n\nexport function AppProvider({ children }) {\n  const [state, dispatch] = useReducer(appReducer, {\n    user: null,\n    theme: ''light''\n  })\n  \n  return (\n    &lt;AppContext.Provider value={{ state, dispatch }}&gt;\n      {children}\n    &lt;/AppContext.Provider&gt;\n  )\n}\n\nexport const useAppContext = () => useContext(AppContext)</code></pre><h3>2. Redux Toolkit: The Mature Solution</h3><p>Ideal for complex applications with intricate state logic:</p><pre><code>import { createSlice, configureStore } from ''@reduxjs/toolkit''\n\nconst userSlice = createSlice({\n  name: ''user'',\n  initialState: {\n    data: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload\n    },\n    setUser: (state, action) => {\n      state.data = action.payload\n      state.loading = false\n      state.error = null\n    },\n    setError: (state, action) => {\n      state.error = action.payload\n      state.loading = false\n    }\n  }\n})\n\nexport const { setLoading, setUser, setError } = userSlice.actions\n\nexport const store = configureStore({\n  reducer: {\n    user: userSlice.reducer\n  }\n})</code></pre><h3>3. Zustand: The Lightweight Alternative</h3><p>Great balance between simplicity and power:</p><pre><code>import { create } from ''zustand''\nimport { devtools, persist } from ''zustand/middleware''\n\nconst useStore = create(\n  devtools(\n    persist(\n      (set, get) => ({\n        user: null,\n        theme: ''light'',\n        setUser: (user) => set({ user }),\n        setTheme: (theme) => set({ theme }),\n        logout: () => set({ user: null }),\n        \n        // Computed values\n        isAuthenticated: () => get().user !== null,\n        \n        // Async actions\n        fetchUser: async (id) => {\n          const response = await fetch(`/api/users/${id}`)\n          const user = await response.json()\n          set({ user })\n        }\n      }),\n      {\n        name: ''app-storage'',\n        partialize: (state) => ({ user: state.user, theme: state.theme })\n      }\n    )\n  )\n)\n\n// Usage in components\nfunction UserProfile() {\n  const { user, setUser, isAuthenticated } = useStore()\n  \n  if (!isAuthenticated()) {\n    return &lt;LoginForm /&gt;\n  }\n  \n  return &lt;div&gt;Welcome, {user.name}!&lt;/div&gt;\n}</code></pre><h3>4. React Query/TanStack Query: Server State Management</h3><p>Specialized for managing server state and caching:</p><pre><code>import { useQuery, useMutation, useQueryClient } from ''@tanstack/react-query''\n\nfunction UserProfile({ userId }) {\n  const queryClient = useQueryClient()\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [''user'', userId],\n    queryFn: () => fetchUser(userId),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n  \n  const updateUserMutation = useMutation({\n    mutationFn: updateUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries([''user'', userId])\n    }\n  })\n  \n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{user.name}&lt;/h1&gt;\n      &lt;button onClick={() => updateUserMutation.mutate(userData)}&gt;\n        Update Profile\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre><h3>Decision Matrix</h3><table><thead><tr><th>Solution</th><th>Best For</th><th>Learning Curve</th><th>Bundle Size</th></tr></thead><tbody><tr><td>Context API</td><td>Simple global state</td><td>Low</td><td>0kb (built-in)</td></tr><tr><td>Redux Toolkit</td><td>Complex state logic</td><td>Medium</td><td>~10kb</td></tr><tr><td>Zustand</td><td>Moderate complexity</td><td>Low</td><td>~2kb</td></tr><tr><td>React Query</td><td>Server state</td><td>Medium</td><td>~12kb</td></tr></tbody></table><h3>Hybrid Approach</h3><p>Often, the best solution combines multiple tools:</p><pre><code>// Use Context for theme and user preferences\nconst ThemeContext = createContext()\n\n// Use React Query for server data\nconst { data: posts } = useQuery([''posts''], fetchPosts)\n\n// Use Zustand for complex client state\nconst useCartStore = create((set) => ({\n  items: [],\n  addItem: (item) => set((state) => ({ \n    items: [...state.items, item] \n  })),\n  removeItem: (id) => set((state) => ({\n    items: state.items.filter(item => item.id !== id)\n  }))\n}))</code></pre><h3>Conclusion</h3><p>The best state management solution depends on your specific needs. Start simple with Context API or Zustand, and scale up to Redux Toolkit for complex applications. Always consider React Query for server state management.</p>', 'React', '15 min read', true, true, 4)
ON CONFLICT DO NOTHING;

-- Insert site settings
INSERT INTO site_settings (key, value) VALUES
('site_title', 'John Doe - Full Stack Developer'),
('site_description', 'Passionate full-stack developer specializing in React, Node.js, and modern web technologies. Building scalable applications and exceptional user experiences.'),
('hero_title', 'Hi, I''m John Doe'),
('hero_subtitle', 'A passionate Full-Stack Developer building scalable web applications and exceptional user experiences with modern technologies.'),
('contact_email', 'john.doe@example.com'),
('github_url', 'https://github.com/johndoe'),
('linkedin_url', 'https://linkedin.com/in/johndoe'),
('twitter_url', 'https://twitter.com/johndoe'),
('resume_url', 'https://drive.google.com/file/d/your-resume-id/view'),
('location', 'San Francisco, CA'),
('phone', '+1 (555) 123-4567'),
('years_experience', '5+'),
('projects_completed', '50+'),
('happy_clients', '30+')
ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value;

COMMIT;
